/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.synectiks.asset.api.controller;

import com.synectiks.asset.api.model.Policy;
import com.synectiks.asset.api.model.PolicyAssignedPermissions;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-21T21:34:23.682367100-07:00[America/Los_Angeles]")
@Validated
@Api(value = "policies", description = "the policies API")
public interface PoliciesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /policies : Retrieve all policies
     *
     * @return A list of policies (status code 200)
     */
    @ApiOperation(value = "Retrieve all policies", nickname = "policiesGet", notes = "", response = Policy.class, responseContainer = "List", tags={ "Policies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of policies", response = Policy.class, responseContainer = "List") })
    @GetMapping(
        value = "/policies",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Policy>> policiesGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"permissions\" : [ { \"permissionCategoryName\" : \"permissionCategoryName\", \"permissionCategoryId\" : 5, \"permissionId\" : 2, \"policyId\" : 5, \"policyName\" : \"policyName\", \"id\" : 1, \"permissionName\" : \"permissionName\" }, { \"permissionCategoryName\" : \"permissionCategoryName\", \"permissionCategoryId\" : 5, \"permissionId\" : 2, \"policyId\" : 5, \"policyName\" : \"policyName\", \"id\" : 1, \"permissionName\" : \"permissionName\" } ], \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"version\" : 6, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /policies/{id} : Delete a policy by ID
     *
     * @param id ID of the policy to delete (required)
     * @return Policy deleted successfully (status code 200)
     */
    @ApiOperation(value = "Delete a policy by ID", nickname = "policiesIdDelete", notes = "", tags={ "Policies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Policy deleted successfully") })
    @DeleteMapping(
        value = "/policies/{id}"
    )
    default ResponseEntity<Void> policiesIdDelete(@ApiParam(value = "ID of the policy to delete",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /policies/{id} : Retrieve a specific policy by ID
     *
     * @param id ID of the policy to retrieve (required)
     * @return The requested policy (status code 200)
     */
    @ApiOperation(value = "Retrieve a specific policy by ID", nickname = "policiesIdGet", notes = "", response = Policy.class, tags={ "Policies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The requested policy", response = Policy.class) })
    @GetMapping(
        value = "/policies/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Policy> policiesIdGet(@ApiParam(value = "ID of the policy to retrieve",required=true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"permissions\" : [ { \"permissionCategoryName\" : \"permissionCategoryName\", \"permissionCategoryId\" : 5, \"permissionId\" : 2, \"policyId\" : 5, \"policyName\" : \"policyName\", \"id\" : 1, \"permissionName\" : \"permissionName\" }, { \"permissionCategoryName\" : \"permissionCategoryName\", \"permissionCategoryId\" : 5, \"permissionId\" : 2, \"policyId\" : 5, \"policyName\" : \"policyName\", \"id\" : 1, \"permissionName\" : \"permissionName\" } ], \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"version\" : 6, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /policies/policy-assigned-permissions : Retrieve all policy assigned permissions
     *
     * @return A list of policy assigned permissions (status code 200)
     */
    @ApiOperation(value = "Retrieve all policy assigned permissions", nickname = "policiesPolicyAssignedPermissionsGet", notes = "", response = PolicyAssignedPermissions.class, responseContainer = "List", tags={ "Policies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of policy assigned permissions", response = PolicyAssignedPermissions.class, responseContainer = "List") })
    @GetMapping(
        value = "/policies/policy-assigned-permissions",
        produces = { "application/json" }
    )
    default ResponseEntity<List<PolicyAssignedPermissions>> policiesPolicyAssignedPermissionsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"permissionCategoryName\" : \"permissionCategoryName\", \"permissionCategoryId\" : 5, \"permissionId\" : 2, \"policyId\" : 5, \"policyName\" : \"policyName\", \"id\" : 1, \"permissionName\" : \"permissionName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /policies/policy-assigned-permissions : Create a new policy assigned permission
     *
     * @param policyAssignedPermissions  (required)
     * @return The created policy assigned permission (status code 201)
     */
    @ApiOperation(value = "Create a new policy assigned permission", nickname = "policiesPolicyAssignedPermissionsPost", notes = "", response = PolicyAssignedPermissions.class, tags={ "Policies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The created policy assigned permission", response = PolicyAssignedPermissions.class) })
    @PostMapping(
        value = "/policies/policy-assigned-permissions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PolicyAssignedPermissions> policiesPolicyAssignedPermissionsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody PolicyAssignedPermissions policyAssignedPermissions) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"permissionCategoryName\" : \"permissionCategoryName\", \"permissionCategoryId\" : 5, \"permissionId\" : 2, \"policyId\" : 5, \"policyName\" : \"policyName\", \"id\" : 1, \"permissionName\" : \"permissionName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /policies : Create a new policy
     *
     * @param policy  (required)
     * @return The created policy (status code 201)
     */
    @ApiOperation(value = "Create a new policy", nickname = "policiesPost", notes = "", response = Policy.class, tags={ "Policies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The created policy", response = Policy.class) })
    @PostMapping(
        value = "/policies",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Policy> policiesPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Policy policy) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"permissions\" : [ { \"permissionCategoryName\" : \"permissionCategoryName\", \"permissionCategoryId\" : 5, \"permissionId\" : 2, \"policyId\" : 5, \"policyName\" : \"policyName\", \"id\" : 1, \"permissionName\" : \"permissionName\" }, { \"permissionCategoryName\" : \"permissionCategoryName\", \"permissionCategoryId\" : 5, \"permissionId\" : 2, \"policyId\" : 5, \"policyName\" : \"policyName\", \"id\" : 1, \"permissionName\" : \"permissionName\" } ], \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"version\" : 6, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
