/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.synectiks.asset.api.controller;

import com.synectiks.asset.api.model.Config;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-21T22:29:14.661605200-07:00[America/Los_Angeles]")
@Validated
@Api(value = "config", description = "the config API")
public interface ConfigApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /config/createConfig : Create a new configuration
     *
     * @param config  (required)
     * @return Successful operation (status code 201)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Create a new configuration", nickname = "createConfig", notes = "", response = Config.class, tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful operation", response = Config.class),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @PostMapping(
        value = "/config/createConfig",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Config> createConfig(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Config config) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isEncrypted\" : true, \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"id\" : 0, \"value\" : \"value\", \"key\" : \"key\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /config/create-encrypted : Create a new encrypted configuration
     *
     * @param config  (required)
     * @return Successful operation (status code 201)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Create a new encrypted configuration", nickname = "createEncryptedConfig", notes = "", response = Config.class, tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful operation", response = Config.class),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @PostMapping(
        value = "/config/create-encrypted",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Config> createEncryptedConfig(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Config config) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isEncrypted\" : true, \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"id\" : 0, \"value\" : \"value\", \"key\" : \"key\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /config/configuration/{id} : Delete a configuration by ID
     *
     * @param id ID of the configuration to delete (required)
     * @return Successful operation (status code 200)
     *         or Configuration not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Delete a configuration by ID", nickname = "deleteConfigById", notes = "", response = String.class, tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = String.class),
        @ApiResponse(code = 404, message = "Configuration not found"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @DeleteMapping(
        value = "/config/configuration/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<String> deleteConfigById(@ApiParam(value = "ID of the configuration to delete",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /config/listAll : Retrieve all configurations
     *
     * @return Successful operation (status code 200)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Retrieve all configurations", nickname = "findAllConfigs", notes = "", response = Config.class, responseContainer = "List", tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Config.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @GetMapping(
        value = "/config/listAll",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Config>> findAllConfigs() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isEncrypted\" : true, \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"id\" : 0, \"value\" : \"value\", \"key\" : \"key\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /config/byId/{id} : Find configuration by ID
     *
     * @param id ID of the configuration to fetch (required)
     * @return Successful operation (status code 200)
     *         or Configuration not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Find configuration by ID", nickname = "findConfigById", notes = "", response = Config.class, tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Config.class),
        @ApiResponse(code = 404, message = "Configuration not found"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @GetMapping(
        value = "/config/byId/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Config> findConfigById(@ApiParam(value = "ID of the configuration to fetch",required=true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isEncrypted\" : true, \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"id\" : 0, \"value\" : \"value\", \"key\" : \"key\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /config/byKey/{key} : Find configuration by key
     *
     * @param key The key of the configuration to find (required)
     * @return Successful operation (status code 200)
     *         or Configuration not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Find configuration by key", nickname = "findConfigByKey", notes = "", response = Config.class, tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Config.class),
        @ApiResponse(code = 404, message = "Configuration not found"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @GetMapping(
        value = "/config/byKey/{key}",
        produces = { "application/json" }
    )
    default ResponseEntity<Config> findConfigByKey(@ApiParam(value = "The key of the configuration to find",required=true) @PathVariable("key") String key) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isEncrypted\" : true, \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"id\" : 0, \"value\" : \"value\", \"key\" : \"key\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /config/find-by-key-org-id : Find configuration by key and organization ID
     *
     * @param key The key of the configuration to find (required)
     * @param organizationId The ID of the organization (required)
     * @return Successful operation (status code 200)
     *         or Configuration not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Find configuration by key and organization ID", nickname = "findConfigByKeyAndOrgId", notes = "", response = Config.class, tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Config.class),
        @ApiResponse(code = 404, message = "Configuration not found"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @GetMapping(
        value = "/config/find-by-key-org-id",
        produces = { "application/json" }
    )
    default ResponseEntity<Config> findConfigByKeyAndOrgId(@NotNull @ApiParam(value = "The key of the configuration to find", required = true) @Valid @RequestParam(value = "key", required = true) String key,@NotNull @ApiParam(value = "The ID of the organization", required = true) @Valid @RequestParam(value = "organizationId", required = true) Long organizationId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isEncrypted\" : true, \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"id\" : 0, \"value\" : \"value\", \"key\" : \"key\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /config/find-by-created-by/{createdBy} : Find configurations by creator
     *
     * @param createdBy The username of the creator (required)
     * @return Successful operation (status code 200)
     *         or No configurations found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Find configurations by creator", nickname = "findConfigsByCreatedBy", notes = "", response = Config.class, responseContainer = "List", tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Config.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No configurations found"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @GetMapping(
        value = "/config/find-by-created-by/{createdBy}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Config>> findConfigsByCreatedBy(@ApiParam(value = "The username of the creator",required=true) @PathVariable("createdBy") String createdBy) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isEncrypted\" : true, \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"id\" : 0, \"value\" : \"value\", \"key\" : \"key\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /config/find-by-org-id/{organizationId} : Find configurations by organization ID
     *
     * @param organizationId The ID of the organization (required)
     * @return Successful operation (status code 200)
     *         or No configurations found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Find configurations by organization ID", nickname = "findConfigsByOrgId", notes = "", response = Config.class, responseContainer = "List", tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Config.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No configurations found"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @GetMapping(
        value = "/config/find-by-org-id/{organizationId}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Config>> findConfigsByOrgId(@ApiParam(value = "The ID of the organization",required=true) @PathVariable("organizationId") Long organizationId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isEncrypted\" : true, \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"id\" : 0, \"value\" : \"value\", \"key\" : \"key\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /config/find-by-status/{status} : Find configurations by status
     *
     * @param status The status of the configurations (required)
     * @return Successful operation (status code 200)
     *         or No configurations found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Find configurations by status", nickname = "findConfigsByStatus", notes = "", response = Config.class, responseContainer = "List", tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Config.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No configurations found"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @GetMapping(
        value = "/config/find-by-status/{status}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Config>> findConfigsByStatus(@ApiParam(value = "The status of the configurations",required=true) @PathVariable("status") String status) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isEncrypted\" : true, \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"id\" : 0, \"value\" : \"value\", \"key\" : \"key\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /config/find-by-updated-by/{updatedBy} : Find configurations by updater
     *
     * @param updatedBy The username of the updater (required)
     * @return Successful operation (status code 200)
     *         or No configurations found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Find configurations by updater", nickname = "findConfigsByUpdatedBy", notes = "", response = Config.class, responseContainer = "List", tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Config.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No configurations found"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @GetMapping(
        value = "/config/find-by-updated-by/{updatedBy}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Config>> findConfigsByUpdatedBy(@ApiParam(value = "The username of the updater",required=true) @PathVariable("updatedBy") String updatedBy) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isEncrypted\" : true, \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"id\" : 0, \"value\" : \"value\", \"key\" : \"key\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
