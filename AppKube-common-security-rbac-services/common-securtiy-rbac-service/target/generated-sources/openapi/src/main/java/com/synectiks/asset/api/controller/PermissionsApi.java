/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.synectiks.asset.api.controller;

import java.util.List;
import java.util.Map;
import com.synectiks.asset.api.model.Permission;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-21T08:33:53.267382700-07:00[America/Los_Angeles]")
@Validated
@Api(value = "permissions", description = "the permissions API")
public interface PermissionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /permissions/createPermissionInBatch : Create permissions in batch
     *
     * @param requestBody  (required)
     * @return Permissions created successfully (status code 200)
     *         or Expectation failed (status code 417)
     */
    @ApiOperation(value = "Create permissions in batch", nickname = "permissionsCreatePermissionInBatchPost", notes = "", response = Permission.class, responseContainer = "List", tags={ "Permissions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Permissions created successfully", response = Permission.class, responseContainer = "List"),
        @ApiResponse(code = 417, message = "Expectation failed", response = String.class) })
    @PostMapping(
        value = "/permissions/createPermissionInBatch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<Permission>> permissionsCreatePermissionInBatchPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Map<String, List<Object>> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 6, \"version\" : 1, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /permissions/createPermissionsByFile : Create permissions by file
     *
     * @param inputFile  (optional)
     * @param str  (optional)
     * @return Permissions created successfully (status code 200)
     *         or Expectation failed (status code 417)
     */
    @ApiOperation(value = "Create permissions by file", nickname = "permissionsCreatePermissionsByFilePost", notes = "", tags={ "Permissions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Permissions created successfully"),
        @ApiResponse(code = 417, message = "Expectation failed", response = String.class) })
    @PostMapping(
        value = "/permissions/createPermissionsByFile",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<Void> permissionsCreatePermissionsByFilePost(@ApiParam(value = "") @Valid @RequestPart(value = "inputFile", required = false) MultipartFile inputFile,@ApiParam(value = "") @Valid @RequestPart(value = "str", required = false)  String str) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /permissions/create : Create a new permission
     *
     * @param permission  (required)
     * @return Created (status code 201)
     */
    @ApiOperation(value = "Create a new permission", nickname = "permissionsCreatePost", notes = "", response = Permission.class, tags={ "Permissions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Permission.class) })
    @PostMapping(
        value = "/permissions/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Permission> permissionsCreatePost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Permission permission) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 6, \"version\" : 1, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /permissions/delete : Delete a permission by ID
     *
     * @param permission  (required)
     * @return Successful operation. Permission deleted successfully. (status code 200)
     *         or Precondition failed. Not a valid entity. (status code 412)
     */
    @ApiOperation(value = "Delete a permission by ID", nickname = "permissionsDeleteDelete", notes = "", tags={ "Permissions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation. Permission deleted successfully."),
        @ApiResponse(code = 412, message = "Precondition failed. Not a valid entity.", response = String.class) })
    @DeleteMapping(
        value = "/permissions/delete",
        produces = { "text/plain" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> permissionsDeleteDelete(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Permission permission) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /permissions/{id} : Delete a permission by ID
     *
     * @param id  (required)
     * @return No content (status code 204)
     */
    @ApiOperation(value = "Delete a permission by ID", nickname = "permissionsIdDelete", notes = "", tags={ "Permissions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content") })
    @DeleteMapping(
        value = "/permissions/{id}"
    )
    default ResponseEntity<Void> permissionsIdDelete(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /permissions/{id} : Retrieve a permission by ID
     *
     * @param id  (required)
     * @return Successful operation (status code 200)
     */
    @ApiOperation(value = "Retrieve a permission by ID", nickname = "permissionsIdGet", notes = "", response = Permission.class, tags={ "Permissions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Permission.class) })
    @GetMapping(
        value = "/permissions/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Permission> permissionsIdGet(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 6, \"version\" : 1, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /permissions/ListAll : Retrieve all permissions
     *
     * @return Successful operation (status code 200)
     */
    @ApiOperation(value = "Retrieve all permissions", nickname = "permissionsListAllGet", notes = "", response = Permission.class, responseContainer = "List", tags={ "Permissions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Permission.class, responseContainer = "List") })
    @GetMapping(
        value = "/permissions/ListAll",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Permission>> permissionsListAllGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 6, \"version\" : 1, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /permissions/update : Update a permission
     *
     * @param permission  (required)
     * @return Successful operation. Returns the updated permission. (status code 200)
     *         or Bad request. Permission not found or invalid request body. (status code 400)
     *         or Expectation failed. An unexpected error occurred. (status code 417)
     */
    @ApiOperation(value = "Update a permission", nickname = "permissionsUpdatePost", notes = "", response = Permission.class, tags={ "Permissions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation. Returns the updated permission.", response = Permission.class),
        @ApiResponse(code = 400, message = "Bad request. Permission not found or invalid request body."),
        @ApiResponse(code = 417, message = "Expectation failed. An unexpected error occurred.") })
    @PostMapping(
        value = "/permissions/update",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Permission> permissionsUpdatePost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Permission permission) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"organization\" : { \"fileName\" : \"fileName\", \"address\" : \"address\", \"description\" : \"description\", \"profileImage\" : \"profileImage\", \"phone\" : \"phone\", \"name\" : \"name\", \"dateOfEstablishment\" : \"2000-01-23T04:56:07.000+00:00\", \"cmdbOrgId\" : 6, \"fileStorageLocationType\" : \"fileStorageLocationType\", \"id\" : 0, \"fax\" : \"fax\", \"email\" : \"email\", \"status\" : \"status\" }, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 6, \"version\" : 1, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
